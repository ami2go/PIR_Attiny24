
PIRv0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000212  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009a  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000039d  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015d  00000000  00000000  000006a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000037f  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018b  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000007d  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}
void Sleep_off(void){
	CLEAR_BIT(MCUCR,SE); 
}

char switch_position(void ){
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	62 c0       	rjmp	.+196    	; 0xca <__vector_2>
   6:	1c c0       	rjmp	.+56     	; 0x40 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a5 36       	cpi	r26, 0x65	; 101
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	a1 d0       	rcall	.+322    	; 0x17e <main>
  3c:	ae c0       	rjmp	.+348    	; 0x19a <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_3>:
				CLEAR_BIT(PORTA, light);
			}
			Sleep_on();
		}
}
ISR(PCINT1_vect){
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
	
}
  4a:	0f 90       	pop	r0
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	0f 90       	pop	r0
  50:	1f 90       	pop	r1
  52:	18 95       	reti

00000054 <GPIOInt>:
   }
}

void GPIOInt (void){
	
	SET_BIT(DDRA,light);  //triac pin as output
  54:	aa e3       	ldi	r26, 0x3A	; 58
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	8c 91       	ld	r24, X
  5a:	88 60       	ori	r24, 0x08	; 8
  5c:	8c 93       	st	X, r24
	
	//switch pins configured as input. 	
	CLEAR_BIT(DDRB, SW0B);
  5e:	e7 e3       	ldi	r30, 0x37	; 55
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	8e 7f       	andi	r24, 0xFE	; 254
  66:	80 83       	st	Z, r24
	CLEAR_BIT(DDRB, SW1B);
  68:	80 81       	ld	r24, Z
  6a:	8d 7f       	andi	r24, 0xFD	; 253
  6c:	80 83       	st	Z, r24
	CLEAR_BIT(DDRA, SW2A);
  6e:	8c 91       	ld	r24, X
  70:	8f 77       	andi	r24, 0x7F	; 127
  72:	8c 93       	st	X, r24
	CLEAR_BIT(DDRA, SW3A);
  74:	8c 91       	ld	r24, X
  76:	8e 7f       	andi	r24, 0xFE	; 254
  78:	8c 93       	st	X, r24
}
  7a:	08 95       	ret

0000007c <SleepInt>:

void SleepInt(void){
	//disable burnout detector sequence 
	SET_BIT(MCUCR,BODS); 
  7c:	e5 e5       	ldi	r30, 0x55	; 85
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	80 68       	ori	r24, 0x80	; 128
  84:	80 83       	st	Z, r24
	SET_BIT(MCUCR,BODSE); 
  86:	80 81       	ld	r24, Z
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	89 2f       	mov	r24, r25
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <SleepInt+0x14>
	_delay_us(1);
	SET_BIT(MCUCR,BODS); 
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
	CLEAR_BIT(MCUCR,BODSE); 
  9a:	80 81       	ld	r24, Z
  9c:	8b 7f       	andi	r24, 0xFB	; 251
  9e:	80 83       	st	Z, r24
  a0:	9a 95       	dec	r25
  a2:	f1 f7       	brne	.-4      	; 0xa0 <SleepInt+0x24>
	//SET IDLE sleep mode
//	CLEAR_BIT(MCUCR,SM0);
//	CLEAR_BIT(MCUCR,SM1);
	
	//set power down mode
	  CLEAR_BIT(MCUCR,SM0);
  a4:	80 81       	ld	r24, Z
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	80 83       	st	Z, r24
	  SET_BIT(MCUCR,SM1);
  aa:	80 81       	ld	r24, Z
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	80 83       	st	Z, r24
}
  b0:	08 95       	ret

000000b2 <Sleep_on>:
void Sleep_on (void){
	SET_BIT(MCUCR,SE); 
  b2:	e5 e5       	ldi	r30, 0x55	; 85
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24
}
  bc:	08 95       	ret

000000be <Sleep_off>:
void Sleep_off(void){
	CLEAR_BIT(MCUCR,SE); 
  be:	e5 e5       	ldi	r30, 0x55	; 85
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	80 83       	st	Z, r24
}
  c8:	08 95       	ret

000000ca <__vector_2>:
	Sleep_on();	
	}
	
}*/

ISR(PCINT0_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
		Sleep_off();
  ec:	e8 df       	rcall	.-48     	; 0xbe <Sleep_off>
		if (gvar.light_enable == 1) {
  ee:	80 91 60 00 	lds	r24, 0x0060
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	e9 f4       	brne	.+58     	; 0x130 <__stack+0x51>
			
			if(bit_is_clear(PINA, comp_in)){
  f6:	ca 99       	sbic	0x19, 2	; 25
  f8:	0f c0       	rjmp	.+30     	; 0x118 <__stack+0x39>
  fa:	84 e6       	ldi	r24, 0x64	; 100
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <__stack+0x1d>
				_delay_us(300);
				SET_BIT(PORTA,light);
 100:	eb e3       	ldi	r30, 0x3B	; 59
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	89 ee       	ldi	r24, 0xE9	; 233
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <__stack+0x2d>
				_delay_us(700);
				CLEAR_BIT(PORTA, light);
 110:	80 81       	ld	r24, Z
 112:	87 7f       	andi	r24, 0xF7	; 247
 114:	80 83       	st	Z, r24
 116:	0b c0       	rjmp	.+22     	; 0x12e <__stack+0x4f>
			}
			
			else {
				
				SET_BIT(PORTA,light);
 118:	eb e3       	ldi	r30, 0x3B	; 59
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	80 83       	st	Z, r24
 122:	89 ee       	ldi	r24, 0xE9	; 233
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <__stack+0x45>
				_delay_us(700);
				CLEAR_BIT(PORTA, light);
 128:	80 81       	ld	r24, Z
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	80 83       	st	Z, r24
			}
			Sleep_on();
 12e:	c1 df       	rcall	.-126    	; 0xb2 <Sleep_on>
		}
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <PCIntIRQInt>:
	return sw_position;
	
}
void PCIntIRQInt(void){
	
	CLEAR_BIT(MCUCR,ISC01); //any logical changes 
 152:	e5 e5       	ldi	r30, 0x55	; 85
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	80 83       	st	Z, r24
	SET_BIT(MCUCR,ISC00);
 15c:	80 81       	ld	r24, Z
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 83       	st	Z, r24
	
	SET_BIT(PCMSK0,PCINT2); // comparator pin
 162:	e2 e3       	ldi	r30, 0x32	; 50
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	80 83       	st	Z, r24
	
//	SET_BIT(PCMSK1,PCINT10); //  pir pin
	
	SET_BIT(GIMSK,PCIE0); // comparator pin
 16c:	eb e5       	ldi	r30, 0x5B	; 91
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 61       	ori	r24, 0x10	; 16
 174:	80 83       	st	Z, r24
	SET_BIT(GIMSK,PCIE1); // pir pin
 176:	80 81       	ld	r24, Z
 178:	80 62       	ori	r24, 0x20	; 32
 17a:	80 83       	st	Z, r24
	 
}
 17c:	08 95       	ret

0000017e <main>:
// MAIN SOFTWARE PART
//************************************************

int main(void)
{
    GPIOInt(); 
 17e:	6a df       	rcall	.-300    	; 0x54 <GPIOInt>
//    analogCompInt();
    PCIntIRQInt();
 180:	e8 df       	rcall	.-48     	; 0x152 <PCIntIRQInt>
	sei();
 182:	78 94       	sei
	SleepInt();
 184:	7b df       	rcall	.-266    	; 0x7c <SleepInt>
	
	
	gvar.light_enable = 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 60 00 	sts	0x0060, r24
	Sleep_on();
 18c:	92 df       	rcall	.-220    	; 0xb2 <Sleep_on>
    /* Replace with your application code */
    while (1) 
    {
	 gvar.light_enable = 1;
 18e:	e0 e6       	ldi	r30, 0x60	; 96
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	89 2f       	mov	r24, r25
 196:	80 83       	st	Z, r24
 198:	fe cf       	rjmp	.-4      	; 0x196 <main+0x18>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
